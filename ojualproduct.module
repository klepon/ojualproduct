<?php 
$modulesPath = 'sites/all/modules/ojualproduct/';
include_once($modulesPath. 'inc/function.php');

define('OJUAL_ADD_PRODUCT_HERE', 'Add product here');
define('OJUAL_PRODUCT', 'ojualproduct');
define('OJUAL_CATEGORY', 'ojualcategory');

define('OJUAL_LANGUAGE_CODE', 'und');
define('OJUAL_LANGUAGE_INDEX', 0);

define('FIELD_OJUAL_product_category', 'field_ojual_product_category');
define('FIELD_OJUAL_product_type', 'field_ojual_product_type');
define('FIELD_OJUAL_product_status', 'field_ojual_product_status');
define('FIELD_OJUAL_product_stock', 'field_ojual_product_stock');
define('FIELD_OJUAL_free_shipping', 'field_ojual_free_shipping');
define('FIELD_OJUAL_fixed_price', 'field_ojual_fixed_price');
define('FIELD_OJUAL_product_price', 'field_ojual_product_price');
define('FIELD_OJUAL_include_my_footnote', 'field_ojual_include_my_footnote');

/* ================================================================================
	module setting on admin
================================================================================= */
// menu seting user to premium
function ojualproduct_menu() {
	$items = array();
	$items['admin/settings/ojual-product'] = array(
		'title' => 'Ojual Product',
		'description' => 'Ojual Product setting page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('ojualproduct_admin'),
		'access arguments' => array('administer users'),
		'type' => MENU_NORMAL_ITEM,
	);

	return $items;
}

function ojualproduct_admin() {

	// tester
	/*
	$vid = 2;
	$fieldName = 'field_test2'; // nanti jadi index array
	$fieldData = array('taxonomy_term_reference', 'Category2', 'options_select', '', 
		array(
		    'allowed_values' => array(
		      array(
		        'vocabulary' => OJUAL_CATEGORY,
		        'parent' => 0
		      ),
		    )
		), 
		array(
			'allowed_values' => array(
				array('vid' => $vid, 'parent' => 0)
			)
		)
	);

	// start create field
	$field = array(
		'field_name'    => $fieldName,
		'type'          => $fieldData[0],
	);

	if(!empty($fieldData[4])) {
		$field['settings'] = $fieldData[4];
	}

	

	$instance = array(
		'field_name'    => $fieldName,
		'entity_type'   => 'node',
		'bundle'        => OJUAL_PRODUCT,
		'label'         => t($fieldData[1]),
		'description'   => t($fieldData[3]),
	    'widget' => array(
	      'type' => $fieldData[2],
	      'weight' => 3,
	    )
	);

	if(!empty($fieldData[5])) {
		$instance['settings'] = $fieldData[5];
	}

	if(field_create_field($field))
		field_create_instance($instance);
		*/
	// tester end




	$form = array();

	$form['ojualproduct_add_new_text'] = array(
		'#type' => 'textfield',
		'#title' => t('Add product text'),
		'#default_value' => variable_get('ojualproduct_add_new_text', OJUAL_ADD_PRODUCT_HERE),
		'#description' => t('Text to show after category name to create new product'),
		'#required' => TRUE
	);

	$tplNodeTypeItem = '
		- product category; dropdown %1$s<br />
		- product type (new or used) radio - %2$s<br />
		- product status (sale/wanted/out of stock/old ads) radio - %3$s<br />
		- product stock (how much is the product) test - %4$s<br />
		- is free shipping (yes/no) checkbox - %5$s<br />
		- is fixed price (yer/no) checkbox - %6$s<br />
		- product price; integer with prefix/suffix for currency - %7$s<br />
		- include my footnote (ye/no to include user footnote) checkbox - %8$s<br />
	';

	$tplNodeType = 'Machine name of node type for product detail<br />This node type must have all field for all product category.Below are global field and will use cross category:<br />%s';

	$desc = sprintf($tplNodeType, sprintf($tplNodeTypeItem, FIELD_OJUAL_product_category, FIELD_OJUAL_product_type, FIELD_OJUAL_product_status, FIELD_OJUAL_product_stock, FIELD_OJUAL_free_shipping, FIELD_OJUAL_fixed_price, FIELD_OJUAL_product_price, FIELD_OJUAL_include_my_footnote));

	$form['ojualproduct_node_type'] = array(
		'#type' => 'textfield',
		'#title' => t('Node type for product detail'),
		'#default_value' => variable_get('ojualproduct_node_type', OJUAL_PRODUCT),
		'#description' => $desc,
		'#required' => TRUE
	);

	$form['ojualproduct_taxo_name'] = array(
		'#type' => 'textfield',
		'#title' => t('Taxonomy for category'),
		'#default_value' => variable_get('ojualproduct_taxo_name', OJUAL_CATEGORY),
		'#description' => t('Machine of taxonomy name for category<br />In term item description field write each line for the product node information:<br />field machine name | field type | required/optional | rendered type (plain|default) | label position (none, above, left) | tpl (ie: &lt;a href="%s"&gt;link &lt;/a&gt;)<br />example:<br />field_dress_size|text|required|plain|left|%s<br /><b>And set text format as Plain text</b><br />Also don\'t forget the friendly url<br />A bit advise for furl<br />- if parent category not used than: fashion-women-dress.html<br />- if parent catgory in use: fashion/women/dress.html'),
		'#required' => TRUE
	);

	return system_settings_form($form);
}

/* ================================================================================
	alter product form
================================================================================= */
function ojualproduct_form_alter(&$form, $form_state, $form_id) {
	
	// return;
	
	global $base_url;	

	$productNode = variable_get('ojualproduct_node_type', OJUAL_PRODUCT);
	$propductForm = sprintf('%s_node_form', $productNode);
	if($form_id == $propductForm) {
		// get category data from form
		$fieldCategory = FIELD_OJUAL_product_category;
		$validCatTerm = $form[$fieldCategory][OJUAL_LANGUAGE_CODE]['#options'];
		unset($validCatTerm['_none']);
		$validCatId = array_keys($validCatTerm);

		// get category data from db to find out wich has setup
		$validCatTermObjArr = array();
		$usedCat = array();
		try{
			$sql = db_select('taxonomy_term_data', 'ttd');
			$sql->fields('ttd', array('tid','name', 'description'));
			$sql->condition('ttd.tid', $validCatId, 'IN');
			$sql->orderby('ttd.name', 'ASC');

			$sql->join('taxonomy_term_hierarchy', 'tth', 'tth.tid = ttd.tid');
			$sql->fields('tth', array('parent'));

			$rs = $sql->execute();
			while ($r = $rs->fetchObject()) {
				$validCatTermObjArr[] = $r;
				$usedCat[$r->tid] = $r->description;
			}
		} catch(Exception $e) {
			//kpdebug($e);
		}

		$validCatTerm = array();
		$validCatTerm = kpBuildUlTree($validCatTermObjArr, $parentId = 0);


		// get form status (new/edit)
		$formStatus = ($form['nid']['#value'] == "") ? 'new' : 'edit';

		// get category status (seted/ unseted)
		$catStatus = ($formStatus == 'edit') 
			? 'seted' : 
			((isset($_GET['ojual_cat']) && in_array($_GET['ojual_cat'], $validCatId)) 
				? 'seted' : 'unseted');

		// show category selection if not yet choosing any catgory
		if($catStatus == 'unseted') {
			// show category term to choose
			$form['category_chooser'] = array(
			  '#markup' => $validCatTerm
			);

			// remove all field and button
			$productCategory = FIELD_OJUAL_product_category;
			foreach ($form_state['field'] as $index => $array) {
				unset($form[$index]);
			}

			unset($form['title']);
			unset($form['actions']);
			unset($form['revision_information']);
			unset($form['author']);
			unset($form['options']);
			unset($form['comment_settings']); // in case comment module is active
			unset($form['revision_information']);
			unset($form['revision_information']);
		} 

		// show form base on category
		else {
			// kpdebug($usedCat, 'usedCat');

			// get category field set, no worry for unvalid cat id, it already handle above :)
			$fieldsData = array();
			$fieldSets = explode("\n", $usedCat[$_GET['ojual_cat']]);
			foreach ($fieldSets as $str) {
				$rules = explode('|', $str);
				$fieldsData[trim($rules[0])] = $rules;
			}

			// kpdebug($fieldsData, 'fields');

			// cross category field
			$ccf = array(FIELD_OJUAL_product_category, FIELD_OJUAL_product_type, FIELD_OJUAL_product_status, FIELD_OJUAL_product_stock, FIELD_OJUAL_free_shipping, FIELD_OJUAL_fixed_price, FIELD_OJUAL_product_price, FIELD_OJUAL_include_my_footnote);

			// show only selected category field
			$fieldsKey = array_keys($fieldsData);
			foreach ($form_state['field'] as $index => $array) {
				if(in_array($index, $fieldsKey)) {
					$form = kpChangeFieldSet($form, $index, $fieldsData[$index][2]);
				} 

				elseif(!in_array($index, $ccf))
					unset($form[$index]);
			}

			// auto fill category base on selection
			$form[$fieldCategory][OJUAL_LANGUAGE_CODE]['#default_value'] = array(kpToInt($_GET['ojual_cat']));

			$form['field_dress_1'][OJUAL_LANGUAGE_CODE]['#required'] = true;
			$form['field_dress_1'][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['#required'] = true;
			$form['field_dress_1'][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['value']['#required'] = true;
		}

		// kpdebug($form, 'form');
		// kpdebug($form_state, 'form state');
		// kpdebug($form_id, 'form id');
	}
}

/* ================================================================================
	create product type and it's cross category field
================================================================================= */
function ojualproduct_install() {

	return;

	// create vocabulary
	$defCat = taxonomy_vocabulary_machine_name_load(OJUAL_CATEGORY);
	if(!$defCat) {
		$vocabulary = new stdClass();
	    $vocabulary->name = 'Product category';
	    $vocabulary->machine_name = OJUAL_CATEGORY;
	    taxonomy_vocabulary_save($vocabulary);
	    $vid = $vocabulary->vid;
	} else {
		$vid = $defCat->vid;
	}

	// create content type
	if (!in_array('product_page', node_type_get_names())) {
		$type = array(
			'type' => 'product_page',
			'name' => t('Product page'),
			'base' => 'node_content',
			'custom' => 1,
			'modified' => 1,
			'locked' => 0,
			'title_label' => 'Product page for all'
		);

		$type = node_type_set_defaults($type);
		node_type_save($type);
		node_add_body_field($type);
	}

	// create cross category field
	$ccf = array(
		FIELD_OJUAL_product_category => array('taxonomy_term_reference', 'Category', 'options_select', '', array(), array(
				'allowed_values' => array(
					array('vid' => $vid, 'parent' => 0)
				)
			)
		), 
		FIELD_OJUAL_product_type => array('list_boolean', 'Condition', 'options_onoff', '', array()), 
		FIELD_OJUAL_product_status => array('list_integer', 'Availability', 'options_buttons', '', array()), 
		FIELD_OJUAL_product_stock => array('', '', '', '', array()), 
		FIELD_OJUAL_free_shipping => array('', '', '', '', array()), 
		FIELD_OJUAL_fixed_price => array('', '', '', '', array()), 
		FIELD_OJUAL_product_price => array('', '', '', '', array()), 
		FIELD_OJUAL_include_my_footnote => array('', '', '', '', array())
	);

	$myField_name = "my_new_field_name";
	if(!field_info_field($myField_name)) {
		$field = array(
			'field_name'    => $myField_name,
			'type'          => 'image',
		);
		field_create_field($field);

		$field_instance = array(
			'field_name'    => $myField_name,
			'entity_type'   => 'node',
			'bundle'        => 'CONTENT_TYPE_NAME',
			'label'         => t('Select an image'),
			'description'   => t(''),
			'widget'        => array(
				'type'      => 'image_image',
				'weight'    => 10,
			),
			'formatter'     => array(
				'label'     => t('label'),
				'format'    => 'image'
			),
			'settings'      => array(
				'file_directory'        => 'photos', // save inside "public://photos"
				'max_filesize'          => '4M',
				'preview_image_style'   => 'thumbnail',
				'title_field'           => TRUE,
				'alt_field'             => FALSE,
			)
		);

		$field = array(
		  'some_field' => array(
		    'field_name' => 'some_field',
		    'type'       => 'list_boolean',
		    'cardinality' => 1,
		    'settings' => array(
		      'allowed_values' => array(0 => 0, 1 => 1), //add the default values for the checkbox
		    ),
		  ),
		);
		$instance = array(
		  'some_field' => array(
		    'field_name' => 'some_field',
		    'label' => $t('My Label'),
		    'required' => true,
		    'widget' => array(
		      'type' => 'options_onoff',
		      'settings' => array('display_label' => 1),
		      'weight' => 8,
		    ),
		    'settings' => array(
		      'user_register_form' => 1,
		    ),
		  ),
		);


		field_create_instance($field_instance);
		drupal_set_message("Field created successfully!");
	}
}




/* ================================================================================
	add css and js, get from node merger, for debug purpose
	* we will need this to hide some node setup menu and auto create furl using js
================================================================================= */
function ojualproduct_init() {
	//kpdebug($_GET['q']);

	// return;

	// add css and js ke several node admin aja
	$q = explode('/', $_GET['q']);
	$q[2] = isset($q[2]) ? $q[2] : '';

	// get component list and register component for js purpose
	$components = explode("\n", 'ojualproduct');
	$inlineJs = sprintf('var comp = [\'%1$s\'];', implode("', '", $components));

	// get page using bootstrap style
	$comNodes = explode("\n", 'ojualproduct');

	if($q[0] == 'node' && ($q[2] == 'edit' || in_array($q[2], $comNodes))) {
		drupal_add_css(drupal_get_path('module', 'nodemerger') . '/css/bootstrap.min.css');
		drupal_add_css(drupal_get_path('module', 'nodemerger') . '/css/nodemerger.css');

		drupal_add_js($inlineJs, 'inline');

		drupal_add_js(drupal_get_path('module', 'nodemerger') . '/js/jquery-1.10.2.min.js');
		drupal_add_js(drupal_get_path('module', 'nodemerger') . '/js/bootstrap.min.js');
		drupal_add_js(drupal_get_path('module', 'nodemerger') . '/js/nodemerger.js');
	}
}


/* ================================================================================
	helper function
================================================================================= */

// strip all char except number
function kpToInt($str) {
	return trim(preg_replace(array('/([^0-9])/i'), array(""), $str));
}

// generate ul li  in tree
function kpBuildUlTree($datas, $parentId = 0) {
	global $base_url;
	$productNode = variable_get('ojualproduct_node_type', OJUAL_PRODUCT);
	$addProductHere = variable_get('ojualproduct_add_new_text', OJUAL_ADD_PRODUCT_HERE);

    $ulTpl = '<ul>%s</ul>';
    $liTpl = '<li><span>%1$s</span> %2$s %3$s</li>';
    $addHereTpl = '<a href="%1$s/node/add/%2$s/?ojual_cat=%3$s">%4$s</a>';

    $li = array();

    foreach ($datas as $data) {
        if ($data->parent == $parentId) {

        	// generate child if any
            $ulLi = kpBuildUlTree($datas, $data->tid);
            if ($ulLi) {
                $data->children = $ulLi;
            }
            else {
            	$data->children = "";
            }

            // Add here text and link
            $addHere = "";
            if($data->description != "") 
				$addHere = sprintf($addHereTpl, $base_url, $productNode, $data->tid, $addProductHere);

			// add item to list
			$li[] = sprintf($liTpl, $data->name, $addHere, $data->children);
        }
    }

    if(!empty($li))
	    return sprintf($ulTpl, implode("", $li));

    return $li;
}

// change field required status
function kpChangeFieldSet($form, $fieldname, $required) {
	/* perhatikan type field, kalo term reference dengan select kayak gini
		$form['field_name'][#attributes][class][0] => field-type-taxonomy-term-reference
			$form['field_name'][OJUAL_LANGUAGE_CODE]['#required'] = true;

		$form['field_name'][#attributes][class][0] => field-type-text
		$form['field_name'][#attributes][class][0] => field-type-text-with-summary
			$form['field_name'][OJUAL_LANGUAGE_CODE]['#required'] = true;
			$form['field_name'][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['#required'] = true;
			$form['field_name'][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['value']['#required'] = true;
	*/


	if($required == 'required') {
		$form[$fieldname][OJUAL_LANGUAGE_CODE]['#required'] = true;
		$form[$fieldname][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['#required'] = true;
		$form[$fieldname][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['value']['#required'] = true;
	} else {
		$form[$fieldname][OJUAL_LANGUAGE_CODE]['#required'] = false;
		$form[$fieldname][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['#required'] = false;
		$form[$fieldname][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['value']['#required'] = false;
	}

	return $form;
}



// tree builder, not in use yet, just for reference
function kpBuildTree($datas, $parentId = 0) {
    $ul = array();

    foreach ($datas as $data) {
        if ($data->parent == $parentId) {
            $li = kpBuildTree($datas, $data->tid);
            if ($li) {
                $data->children = $li;
            }
            $ul[] = $data;
        }
    }

    return $ul;
}
