<?php 
$modulesPath = 'sites/all/modules/ojualproduct/';
include_once($modulesPath. 'inc/function.php');

define('OJUAL_ADD_PRODUCT_HERE', 'Add product here');
define('OJUAL_PRODUCT', 'ojualproduct');
define('OJUAL_CATEGORY', 'ojualcategory');
define('OJUAL_FIELD_CATEGORY', 'field_ojual_category');
define('OJUAL_TAXO_DATA', 'ojual_taxo_data'); // change this to follow ojualproduct_taxo_name description

define('OJUAL_LANGUAGE_CODE', 'und');
define('OJUAL_LANGUAGE_INDEX', 0);



/* ================================================================================
	module setting on admin
================================================================================= */
// menu seting user to premium
function ojualproduct_menu() {
	$items = array();
	$items['admin/settings/ojual-product'] = array(
		'title' => 'Ojual Product',
		'description' => 'Ojual Product setting page',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('ojualproduct_admin'),
		'access arguments' => array('administer users'),
		'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

function ojualproduct_admin() {
	$form = array();

	$form['ojualproduct_add_new_text'] = array(
		'#type' => 'textfield',
		'#title' => t('Add product text'),
		'#default_value' => variable_get('ojualproduct_add_new_text', OJUAL_ADD_PRODUCT_HERE),
		'#description' => t('Text to show after category name to create new product'),
		'#required' => TRUE
	);

	$form['ojualproduct_node_type'] = array(
		'#type' => 'textfield',
		'#title' => t('Node type for product detail'),
		'#default_value' => variable_get('ojualproduct_node_type', OJUAL_PRODUCT),
		'#description' => t('Machine name of node type for product detail<br />This node type must have all field for all product category.Below are global field and will use cross category:<br />- product category; dropdown field_ojual_product_category<br />- product type (new or used) radio - field_ojual_product_type<br />- product status (sale/wanted/out of stock/old ads) radio - field_ojual_product_status<br />- product stock (how much is the product) test - field_ojual_product_stock<br />- is free shipping (yes/no) checkbox - field_ojual_free_shipping<br />- is fixed price (yer/no) checkbox - field_ojual_fixed_price<br />- product price; integer with prefix/suffix for currency - field_ojual_product_price<br />- include my footnote (ye/no to include user footnote) checkbox - field_ojual_include_my_footnote'),
		'#required' => TRUE
	);

	$form['ojualproduct_taxo_name'] = array(
		'#type' => 'textfield',
		'#title' => t('Taxonomy for category'),
		'#default_value' => variable_get('ojualproduct_taxo_name', OJUAL_CATEGORY),
		'#description' => t('Machine of taxonomy name for category<br />In term item description field write each line for the product node information:<br />field machine name | field type | required/optional | rendered type (plain|default) | label position (none, above, left) | tpl (ie: &lt;a href="%s"&gt;link &lt;/a&gt;)<br />example:<br />field_dress_size|text|required|plain|left|%s<br /><b>And set text format as Plain text</b><br />Also don\'t forget the friendly url<br />A bit advise for furl<br />- if parent category not used than: fashion-women-dress.html<br />- if parent catgory in use: fashion/women/dress.html'),
		'#required' => TRUE
	);

	$form['ojualproduct_category_field'] = array(
		'#type' => 'textfield',
		'#title' => t('Category field in product detail'),
		'#default_value' => variable_get('ojualproduct_category_field', OJUAL_FIELD_CATEGORY),
		'#description' => t('Machine of category field for product detail'),
		'#required' => TRUE
	);


	return system_settings_form($form);
}

/* ================================================================================
	alter product form
================================================================================= */
function ojualproduct_form_alter(&$form, $form_state, $form_id) {
	global $base_url;

	$productNode = variable_get('ojualproduct_node_type', OJUAL_PRODUCT);
	$propductForm = sprintf('%s_node_form', $productNode);
	if($form_id == $propductForm) {
		// get category data from form
		$fieldCategory = variable_get('ojualproduct_category_field', OJUAL_FIELD_CATEGORY);
		$validCatTerm = $form[$fieldCategory][OJUAL_LANGUAGE_CODE]['#options'];
		unset($validCatTerm['_none']);
		$validCatId = array_keys($validCatTerm);

		// get category data from db to find out wich has setup
		$validCatTermObjArr = array();
		$usedCat = array();
		try{
			$sql = db_select('taxonomy_term_data', 'ttd');
			$sql->fields('ttd', array('tid','name', 'description'));
			$sql->condition('ttd.tid', $validCatId, 'IN');
			$sql->orderby('ttd.name', 'ASC');

			$sql->join('taxonomy_term_hierarchy', 'tth', 'tth.tid = ttd.tid');
			$sql->fields('tth', array('parent'));

			$rs = $sql->execute();
			while ($r = $rs->fetchObject()) {
				$validCatTermObjArr[] = $r;
				$usedCat[$r->tid] = $r->description;
			}
		} catch(Exception $e) {
			//kpdebug($e);
		}

		$validCatTerm = array();
		$validCatTerm = kpBuildUlTree($validCatTermObjArr, $parentId = 0);


		// get form status (new/edit)
		$formStatus = ($form['nid']['#value'] == "") ? 'new' : 'edit';

		// get category status (seted/ unseted)
		$catStatus = ($formStatus == 'edit') 
			? 'seted' : 
			((isset($_GET['ojual_cat']) && in_array($_GET['ojual_cat'], $validCatId)) 
				? 'seted' : 'unseted');

		// show category selection if not yet choosing any catgory
		if($catStatus == 'unseted') {
			// show category term to choose
			$form['category_chooser'] = array(
			  '#markup' => $validCatTerm
			);

			// remove all field and button
			$productCategory = variable_get('ojualproduct_category_field', OJUAL_FIELD_CATEGORY);
			foreach ($form_state['field'] as $index => $array) {
				unset($form[$index]);
			}

			unset($form['title']);
			unset($form['actions']);
			unset($form['revision_information']);
			unset($form['author']);
			unset($form['options']);
			unset($form['comment_settings']); // in case comment module is active
			unset($form['revision_information']);
			unset($form['revision_information']);
		} 

		// show form base on category
		else {
			/* perhatikan type field, kalo term reference dengan select kayak gini
			[#attributes][class][0] => field-type-taxonomy-term-reference
				$form['field_name'][OJUAL_LANGUAGE_CODE]['#required'] = true;

			[#attributes][class][0] => field-type-text
			[#attributes][class][0] => field-type-text-with-summary
				$form['field_name'][OJUAL_LANGUAGE_CODE]['#required'] = true;
				$form['field_name'][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['#required'] = true;
				$form['field_name'][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['value']['#required'] = true;
			*/

			kpdebug($usedCat, 'usedCat');

			// get catgeory field set, no worry for unvalid cat id, it already handle above :)
			$fieldSet = explode("\n", $usedCat[$_GET['ojual_cat']]);

			kpdebug($fieldSet, 'fieldSet');


			// show only selected category field
			foreach ($form_state['field'] as $index => $array) {
				// if()
				unset($form[$index]);
			}

			// auto fill category base on selection
			$form[$fieldCategory][OJUAL_LANGUAGE_CODE]['#default_value'] = array(kpToInt($_GET['ojual_cat']));

			$form['field_dress_1'][OJUAL_LANGUAGE_CODE]['#required'] = true;
			$form['field_dress_1'][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['#required'] = true;
			$form['field_dress_1'][OJUAL_LANGUAGE_CODE][OJUAL_LANGUAGE_INDEX]['value']['#required'] = true;
		}

		// kpdebug($form, 'form');
		// kpdebug($form_state, 'form state');
		// kpdebug($form_id, 'form id');
	}
}

/* ================================================================================
	add css and js, get from node merger, for debug purpose
	* we will need this to hide some node setup menu and auto create furl using js
================================================================================= */
function ojualproduct_init() {
	//kpdebug($_GET['q']);

	// return;

	// add css and js ke several node admin aja
	$q = explode('/', $_GET['q']);
	$q[2] = isset($q[2]) ? $q[2] : '';

	// get component list and register component for js purpose
	$components = explode("\n", 'ojualproduct');
	$inlineJs = sprintf('var comp = [\'%1$s\'];', implode("', '", $components));

	// get page using bootstrap style
	$comNodes = explode("\n", 'ojualproduct');

	if($q[0] == 'node' && ($q[2] == 'edit' || in_array($q[2], $comNodes))) {
		drupal_add_css(drupal_get_path('module', 'nodemerger') . '/css/bootstrap.min.css');
		drupal_add_css(drupal_get_path('module', 'nodemerger') . '/css/nodemerger.css');

		drupal_add_js($inlineJs, 'inline');

		drupal_add_js(drupal_get_path('module', 'nodemerger') . '/js/jquery-1.10.2.min.js');
		drupal_add_js(drupal_get_path('module', 'nodemerger') . '/js/bootstrap.min.js');
		drupal_add_js(drupal_get_path('module', 'nodemerger') . '/js/nodemerger.js');
	}
}


/* ================================================================================
	helper function
================================================================================= */

// strip all char except number
function kpToInt($str) {
	return trim(preg_replace(array('/([^0-9])/i'), array(""), $str));
}

// generate ul li  in tree
function kpBuildUlTree($datas, $parentId = 0) {
	global $base_url;
	$productNode = variable_get('ojualproduct_node_type', OJUAL_PRODUCT);
	$addProductHere = variable_get('ojualproduct_add_new_text', OJUAL_ADD_PRODUCT_HERE);

    $ulTpl = '<ul>%s</ul>';
    $liTpl = '<li><span>%1$s</span> %2$s %3$s</li>';
    $addHereTpl = '<a href="%1$s/node/add/%2$s/?ojual_cat=%3$s">%4$s</a>';

    $li = array();

    foreach ($datas as $data) {
        if ($data->parent == $parentId) {

        	// generate child if any
            $ulLi = kpBuildUlTree($datas, $data->tid);
            if ($ulLi) {
                $data->children = $ulLi;
            }
            else {
            	$data->children = "";
            }

            // Add here text and link
            $addHere = "";
            if($data->description != "") 
				$addHere = sprintf($addHereTpl, $base_url, $productNode, $data->tid, $addProductHere);

			// add item to list
			$li[] = sprintf($liTpl, $data->name, $addHere, $data->children);
        }
    }

    if(!empty($li))
	    return sprintf($ulTpl, implode("", $li));

    return $li;
}

// tree builder, not in use yet, just for reference
function kpBuildTree($datas, $parentId = 0) {
    $ul = array();

    foreach ($datas as $data) {
        if ($data->parent == $parentId) {
            $li = kpBuildTree($datas, $data->tid);
            if ($li) {
                $data->children = $li;
            }
            $ul[] = $data;
        }
    }

    return $ul;
}
